 name: RDP

on:
  workflow_dispatch:

jobs:
  secure-rdp:
    runs-on: windows-latest
    timeout-minutes: 3600

    steps:
      - name: Configure Core RDP Settings
        run: |
          # Enable Remote Desktop and disable Network Level Authentication (if needed)
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' `
                             -Name "fDenyTSConnections" -Value 0 -Force
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' `
                             -Name "UserAuthentication" -Value 0 -Force
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' `
                             -Name "SecurityLayer" -Value 0 -Force

          # Enable audio playback redirection
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' `
                             -Name "fDisableAudioRedirection" -Value 0 -Force
          
          # Enable microphone (audio capture) redirection
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' `
                             -Name "fDisableAudioCapture" -Value 0 -Force
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' `
                             -Name "AudioCaptureRedirectionMode" -Value 0 -Force

          # Firewall rule for RDP
          netsh advfirewall firewall delete rule name="RDP-Tailscale" 2>$null
          netsh advfirewall firewall add rule name="RDP-Tailscale" `
            dir=in action=allow protocol=TCP localport=3389

          # Restart Remote Desktop service
          Restart-Service -Name TermService -Force

      - name: Disable Hyper-V and Prepare Emulator Support
        run: |
          # Disable Hyper-V if enabled
          $hv = Get-WindowsOptionalFeature -Online -FeatureName Microsoft-Hyper-V-All
          if ($hv.State -eq "Enabled") {
              Write-Host "Hyper-V is enabled, disabling..."
              Disable-WindowsOptionalFeature -Online -FeatureName Microsoft-Hyper-V-All -NoRestart
          } else {
              Write-Host "Hyper-V is already disabled"
          }

          # Enable Virtual Machine Platform and Hypervisor Platform
          Enable-WindowsOptionalFeature -Online -FeatureName VirtualMachinePlatform -NoRestart
          Enable-WindowsOptionalFeature -Online -FeatureName HypervisorPlatform -NoRestart

      - name: Install BlueStacks Emulator
        run: |
          # Accept msstore agreements first
          winget list --accept-source-agreements 2>$null
          
          # Try to install BlueStacks from winget source (not msstore)
          Write-Host "Installing BlueStacks..."
          $result = winget install -e --id BlueStacks.BlueStacks `
            --source winget `
            --locale en-US `
            --accept-package-agreements `
            --accept-source-agreements 2>&1
          
          if ($LASTEXITCODE -ne 0) {
              Write-Host "BlueStacks installation via winget failed, trying direct download..."
              
              # Fallback: Direct download and install
              $bluestacksUrl = "https://cdn3.bluestacks.com/downloads/windows/nxt/5.21.100.1001/x64/BlueStacksFullInstaller_5.21.100.1001_amd64_native.exe"
              $installerPath = "$env:TEMP\BlueStacks_Installer.exe"
              
              try {
                  Invoke-WebRequest -Uri $bluestacksUrl -OutFile $installerPath -UseBasicParsing
                  Start-Process -FilePath $installerPath -ArgumentList "-s" -Wait -NoNewWindow
                  Remove-Item $installerPath -Force -ErrorAction SilentlyContinue
                  Write-Host "BlueStacks installed successfully via direct download"
              } catch {
                  Write-Warning "BlueStacks installation failed: $_"
                  Write-Host "Continuing without BlueStacks..."
              }
          } else {
              Write-Host "BlueStacks installed successfully via winget"
          }

      - name: Enable and Install Audio Support
        run: |
          # Ensure Windows Audio service is enabled and running
          Set-Service -Name "Audiosrv" -StartupType Automatic
          Start-Service -Name "Audiosrv"

          # Update all system drivers to latest available
          pnputil /scan-devices
          
      - name: Upgrade System Apps and Browsers
        run: |
          # Accept all source agreements first
          winget list --accept-source-agreements 2>$null
          
          # Upgrade all packages from winget source only
          Write-Host "Upgrading all packages..."
          winget upgrade --all `
            --source winget `
            --locale en-US `
            --accept-package-agreements `
            --accept-source-agreements `
            --silent 2>$null

          # Ensure Google Chrome is installed or upgraded
          Write-Host "Checking Google Chrome..."
          $chromeInstalled = winget list --id Google.Chrome 2>$null
          if (-not $chromeInstalled) {
            winget install -e --id Google.Chrome `
              --source winget `
              --locale en-US `
              --accept-package-agreements `
              --accept-source-agreements
          } else {
            winget upgrade -e --id Google.Chrome `
              --source winget `
              --locale en-US `
              --accept-package-agreements `
              --accept-source-agreements 2>$null
          }

          # Upgrade Edge to latest version
          Write-Host "Upgrading Microsoft Edge..."
          winget upgrade -e --id Microsoft.Edge `
            --source winget `
            --locale en-US `
            --accept-package-agreements `
            --accept-source-agreements 2>$null

      - name: Install or Upgrade WSL
        run: |
          # Ensure WSL is installed
          try {
              $wslStatus = wsl --status 2>&1
              Write-Host "WSL is already installed"
          } catch {
              Write-Host "WSL not found, installing..."
              wsl --install --no-launch
          }

          # Update WSL kernel and set default to WSL 2
          wsl --update 2>$null
          wsl --set-default-version 2

          # Optional: install Ubuntu distro if not exists
          $ubuntuExists = wsl -l -q 2>$null | Select-String "Ubuntu"
          if (-not $ubuntuExists) {
              wsl --install -d Ubuntu --no-launch 2>$null
          }

          # Verify WSL status
          wsl --status

      - name: Create RDP User with Secure Password
        run: |
          Add-Type -AssemblyName System.Security
          $charSet = @{
              Upper   = [char[]](65..90)
              Lower   = [char[]](97..122)
              Number  = [char[]](48..57)
              Special = ([char[]](33..47) + [char[]](58..64) + [char[]](91..96) + [char[]](123..126))
          }
          $rawPassword = @()
          $rawPassword += $charSet.Upper | Get-Random -Count 4
          $rawPassword += $charSet.Lower | Get-Random -Count 4
          $rawPassword += $charSet.Number | Get-Random -Count 4
          $rawPassword += $charSet.Special | Get-Random -Count 4
          $password = -join ($rawPassword | Sort-Object { Get-Random })
          $securePass = ConvertTo-SecureString $password -AsPlainText -Force
          New-LocalUser -Name "RDP" -Password $securePass -AccountNeverExpires
          Add-LocalGroupMember -Group "Administrators" -Member "RDP"
          Add-LocalGroupMember -Group "Remote Desktop Users" -Member "RDP"

          echo "RDP_USER=RDP" >> $env:GITHUB_ENV
          echo "RDP_PASSWORD=$password" >> $env:GITHUB_ENV

          if (-not (Get-LocalUser -Name "RDP")) {
              Write-Error "User creation failed"
              exit 1
          }

      - name: Install Tailscale
        run: |
          # Accept source agreements
          winget list --accept-source-agreements 2>$null
          
          Write-Host "Installing Tailscale..."
          winget install -e --id Tailscale.Tailscale `
            --source winget `
            --locale en-US `
            --accept-package-agreements `
            --accept-source-agreements

      - name: Establish Tailscale Connection
        run: |
          & "$env:ProgramFiles\Tailscale\tailscale.exe" up --authkey=${{ secrets.TAILSCALE_AUTH_KEY }} --hostname=gh-runner-$env:GITHUB_RUN_ID
          
          $tsIP = $null
          $retries = 0
          while (-not $tsIP -and $retries -lt 10) {
              $tsIP = & "$env:ProgramFiles\Tailscale\tailscale.exe" ip -4
              Start-Sleep -Seconds 5
              $retries++
          }
          
          if (-not $tsIP) {
              Write-Error "Tailscale IP not assigned. Exiting."
              exit 1
          }
          echo "TAILSCALE_IP=$tsIP" >> $env:GITHUB_ENV
      
      - name: Verify RDP Accessibility
        run: |
          Write-Host "Tailscale IP: $env:TAILSCALE_IP"
          
          $testResult = Test-NetConnection -ComputerName $env:TAILSCALE_IP -Port 3389
          if (-not $testResult.TcpTestSucceeded) {
              Write-Error "TCP connection to RDP port 3389 failed"
              exit 1
          }
          Write-Host "TCP connectivity successful!"

      - name: Maintain Connection
        run: |
          Write-Host "`n=== RDP ACCESS ==="
          Write-Host "Address: $env:TAILSCALE_IP"
          Write-Host "Username: $env:RDP_USER"
          Write-Host "Password: $env:RDP_PASSWORD"
          Write-Host "==================`n"
          
          while ($true) {
              Write-Host "[$(Get-Date)] RDP Active - Use Ctrl+C in workflow to terminate"
              Start-Sleep -Seconds 300
          }
